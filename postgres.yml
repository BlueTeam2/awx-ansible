---
- name: Postgres server
  hosts: service_postgres
  become: yes
  roles:
    - install_docker
  post_tasks:
    - name: Create docker directory
      file:
        path: "{{ docker_dir }}"
        state: directory
        owner: "{{ docker_files_owner }}"
        group: "{{ docker_group }}"
        mode: "{{ docker_dir_mode }}"
    
    - name: Create postgres entrypoint directory
      file:
        path: "{{ postgres_entrypoint }}"
        state: directory
        owner: "{{ docker_files_owner }}"
        group: "{{ docker_group }}"
        mode: "{{ docker_dir_mode }}"

    - name: Copy initial database script
      ansible.builtin.copy:
        src: "{{ postgres_initdb_script_src }}"
        dest: "{{ postgres_initdb_script_dest }}"
        owner: "{{ docker_files_owner }}"
        group: "{{ docker_group }}"
        mode: "{{ docker_files_mode }}"

    - name: Copy initial database dump
      ansible.builtin.copy:
        src: "{{ postgres_initial_data_src }}"
        dest: "{{ postgres_initial_data_dest }}"
        owner: "{{ docker_files_owner }}"
        group: "{{ docker_group }}"
        mode: "{{ docker_files_mode }}"

    - name: Create .env from template
      ansible.builtin.template:
        src: "{{ postgres_template_env_src }}"
        dest: "{{ postgres_env_dest }}"
        owner: "{{ docker_files_owner }}"
        group: "{{ docker_group }}"
        mode: "{{ docker_files_mode }}"
    
    - name: Run postgres container
      community.docker.docker_container:
        name: "{{ postgres_container_name }}"
        image: "{{ postgres_image }}"
        state: started
        restart_policy: always
        published_ports:
          - "{{ postgres_port }}:5432"
        env_file: "{{ postgres_env_dest }}"
        mounts:
          - source: postgres_volume
            target: /var/lib/postgresql/data
          - type: bind
            source: "{{ postgres_entrypoint }}"
            target: /docker-entrypoint-initdb.d
